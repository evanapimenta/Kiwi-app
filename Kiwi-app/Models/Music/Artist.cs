using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Kiwi_app.Models.Music;

/// <summary>
/// Represents an artist/a band in the system, that may have albums and tracks associated with it.
/// </summary>
/// <param name="_artistName">The name of the band/artist.</param>
internal class Artist(string _artistName)
{
    private static readonly HashSet<int> artistIds = new();
    private static readonly Random random = new();
    private static readonly object lockObject = new();

    private readonly List<int> _artistRatings = new();
    public IReadOnlyList<int> ArtistRatings => _artistRatings.AsReadOnly();

    public double ArtistAverage => _artistRatings.Count == 0 ? 0 : _artistRatings.Average();

    public string Name
    {
        get => _artistName;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
            {
                throw new ArgumentNullException(nameof(value), "Name cannot be null or empty");
            }

            _artistName = value;
        }
    }

    public int Id { get; private set; } = GenerateUniqueArtistId();

    private List<Album> _albums = new();
    public IReadOnlyList<Album> Albums => _albums.AsReadOnly();

    private List<Track> _tracks = new();
    public IReadOnlyList<Track> Tracks => _tracks.AsReadOnly();


    /// <summary>
    /// Generates an unique user ID to be added to artistIds.
    /// </summary>
    /// <returns>A unique integer value to be associated with an artist.</returns>

    public static int GenerateUniqueArtistId()
    {
        int newArtistId;
        lock (lockObject)
        {
            do
            {
                newArtistId = random.Next(1, 1000000);
            } while (!AddArtistId(newArtistId));
        }

        return newArtistId;
    }

    /// <summary>
    /// Add the unique ID generated by <see cref="GenerateUniqueArtistId"/> to the artistIds HashSet.
    /// </summary>
    /// <param name="newArtistId">An unique integer to be added to the artistIds HashSet, thus being associated with an artist.</param>
    /// <returns>
    /// <see langword="true"/> if the artist ID was successfully added to the HashSet (i.e., it was unique and not previously present); 
    /// <see langword="false"/> if the artist ID was already in the HashSet (i.e., it was not unique).
    ///</returns>
    public static bool AddArtistId(int newArtistId)
    {
        return artistIds.Add(newArtistId);
    }

    /// <summary>
    /// Adds an album to the artist.
    /// </summary>
    /// <param name="album">The album to be added.</param>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="album">parameter is null.</exception>
    public void AddAlbumToArtist(Album album)
    {
        if (album == null)
            throw new ArgumentNullException(nameof(album), "Album cannot be null");

        if (!Albums.Contains(album))
        {
            _albums.Add(album);
        }

    }

    /// <summary>
    /// Adds track to artist.
    /// </summary>
    /// <param name="track">The track to be added to the artist's catalog.</param>
    /// <exception cref="ArgumentNullException">Thrown when <paramref name="track"/> is null.</exception>
    /// <exception cref="InvalidOperationException">Thrown when the track's artist does not match this artist./></exception>
    public void AddTrackToArtist(Track track)
    {
        if (track == null) throw new ArgumentNullException(nameof(track), "Track cannot be null");
        if (track.Artist != this)
            throw new InvalidOperationException("Track's artist does not match this artist.");

        if (!Tracks.Contains(track))
            _tracks.Add(track);
    }

    /// <summary>
    /// Rates the artist with a given rating, adding it to the artist's list of ratings.
    /// </summary>
    /// <param name="rating">The rating to be added, which must be between 0 and 5 (inclusive).</param>
    /// <exception cref="ArgumentOutOfRangeException">Thrown when the <paramref name="rating"/> is less than 0 or greater than 5.</exception>
    public void RateArtist(int rating)
    {
        if (rating < 0 || rating > 5)
            throw new ArgumentOutOfRangeException(nameof(rating), "Rating must be between 0 and 5.");

        _artistRatings.Add(rating);
    }
}
