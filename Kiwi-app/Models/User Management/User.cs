using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Kiwi_app.Models.Music;

namespace Kiwi_app.Models.UserManagement;

/// <summary>
/// Represents an user in the system with an unique ID linked to it.
/// </summary>
/// <param name="Username">The username chosen by the user upon account creation.</param>
/// <param name="Email">The e-mail address chosen by the user upon account creation.</param>
/// <param name="Password">The password chosen by the user upon account creation.</param>
internal class User(string _user, string _email, string Password)
    {
    private static readonly HashSet<int> userIds = new();
    private static readonly object lockObject = new();
    
    public int UserId { get; } = GenerateUniqueUserId();
    
    public string Username
    {
        get => _user;
        set
        {
            if (string.IsNullOrWhiteSpace(_user))
                throw new ArgumentNullException(nameof(_user), "Username cannot be null or empty");
            _user = value;
        }
    }
    public string Email
    {
        get => _email;
        set
        {
            if (string.IsNullOrWhiteSpace(value))
                throw new ArgumentNullException(nameof(value), "E-mail cannot be null or empty");
        }
    }

    private readonly string hashedPassword = IPasswordHasher.Hash(Password ?? throw new ArgumentNullException(nameof(Password), "Password cannot be null"));

    public List<Playlist> AccountPlaylists { get; } = new();
    public int PlaylistCount => AccountPlaylists.Count;
    
    /// <summary>
    /// Generates a unique user ID to be added to the system, preventing duplicates.
    /// </summary>
    /// <returns>A unique ID to be added to the system and linked to an user.</returns>
    private static int GenerateUniqueUserId()
    {
        int newUserId;
        Random random = new();

        lock (lockObject)
        {
            do
            {
                newUserId = random.Next(1000000, 10000000);
            } while (!AddUserId(newUserId));
        }

        return newUserId;
    }
    
    /// <summary>
    /// Add the unique ID generated by <see cref="GenerateUniqueArtistId"/> to the artistIds HashSet.
    /// </summary>
    /// <param name="newUserId"></param>
    /// <returns>
    /// <see langword="true"/> if the artist ID was successfully added to the HashSet (i.e., it was unique and not previously present); 
    /// <see langword="false"/> if the artist ID was already in the HashSet (i.e., it was not unique).
    ///</returns>
    public static bool AddUserId(int newUserId)
    {
        return userIds.Add(newUserId);
    }
     // To-do: Create method for comparing hash+password
}
