using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Kiwi_app
{
    /// <summary>
    /// Represents a playlist in the system that may be associated with a user.
    /// </summary>
    /// <param name="User">The user that the playlist will be linked to.</param>
    internal class Playlist(User User)
    {
        private static readonly HashSet<int> userPlaylistIds = new();
        private static readonly Random random = new();
        private static readonly object lockObject = new();


        private TimeSpan _playlistDuration;
        public User User { get; } = User ?? throw new ArgumentNullException(nameof(User), "User cannot be null");
        public string PlaylistName { get; } = $"Playlist nº {(User.PlaylistCount + 1)}";
        public int PlaylistId { get; } = GenerateUniquePlaylistId();

        public bool IsEmpty { get; private set; } = true;
        public List<Track> PlaylistTracks { get; } = new();
        public TimeSpan PlaylistDuration {
            get => _playlistDuration;
            private set => _playlistDuration = value;
        }

        /// <summary>
        /// Updates the total duration of the playlist by summing the lengths of all tracks.
        /// </summary>
        public void UpdatePlaylistDuration()
        {
            _playlistDuration = TimeSpan.FromHours(PlaylistTracks.Sum(track => track.Duration.TotalHours));
        }

        /// <summary>
        /// Generates an unique ID to the playlist.
        /// </summary>
        /// <returns>A unique integer value that will represent a certain user playlist.</returns>
        public static int GenerateUniquePlaylistId()
        {
            int newPlaylistId;
            Random random = new();

            lock (lockObject)
            {
                do
                {
                    newPlaylistId = random.Next(0, 1500000);

                } while (!Playlist.AddPlaylistId(newPlaylistId));
            }

            return newPlaylistId;
        }

        /// <summary>
        /// Add the unique ID generated by <see cref="GenerateUniquePlaylistId"/> to the userPlaylistIds HashSet, guaranteeing that inside the user's playlist ID numbers, there are no duplicates.
        /// </summary>
        /// <param name="playlistId">An unique integer to be added to the userPlaylistIds HashSet and linked to a user.</param>
        /// <returns>
        /// <see langword="true"/> if the playlist ID was successfully added to the HashSet (i.e., it was unique and not previously present); 
        /// <see langword="false"/> if the playlist ID was already in the HashSet (i.e., it was not unique).
        /// </returns>
        public static bool AddPlaylistId(int playlistId)
        {
            return userPlaylistIds.Add(playlistId);
        }

        /// <summary>
        /// Adds a track to the user's playlist.
        /// </summary>
        /// <param name="track">The track to be added to the playlist.</param>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="track"/>is null.</exception>
        public static void AddTrackToPlaylist(List<Track> playlist, Track track)
        {
            if (playlist == null) throw new ArgumentNullException(nameof(playlist), "Playlist cannot be null.");
            if (track == null) throw new ArgumentNullException(nameof(track), "Track cannot be null");

            if (!playlist.Contains(track)) playlist.Add(track);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="playlist">The playlist to which the track will be added by the user.</param>
        /// <param name="track">The track to be added to a specific playlist.</param>
        /// <exception cref="ArgumentNullException">Thrown when <paramref name="playlist"/> or <paramref name="track"/> are null.</exception>
        /// <exception cref="InvalidOperationException">Thrown when the method is called upon a <paramref name="track"/> that does not currently exist in the playlist.</exception>
        public static void RemoveTrackFromPlaylist(List<Track> playlist, Track track) 
        {
            if (playlist == null) throw new ArgumentNullException(nameof(playlist), "Playlist cannot be null.");
            if (track == null) throw new ArgumentNullException(nameof(track), "Track cannot be null.");

            if (!playlist.Contains(track)) throw new InvalidOperationException("Track not found in the playlist.");

            playlist.Remove(track);

        }
    }
}
