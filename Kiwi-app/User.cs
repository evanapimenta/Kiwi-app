using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Kiwi_app
{
    /// <summary>
    /// Represents an user in the system with an unique ID linked to it.
    /// </summary>
    /// <param name="Username">The username chosen by the user upon account creation.</param>
    /// <param name="Email">The e-mail address chosen by the user upon account creation.</param>
    /// <param name="Password">The password chosen by the user upon account creation.</param>
    internal class User(string Username, string Email, string Password)
    {
        private static readonly HashSet<int> userIds = new();
        private static readonly object lockObject = new();

        public int UserId { get; } = GenerateUniqueUserId();

        public string Username { get; } = Username ?? throw new ArgumentNullException(nameof(Username), "Username cannot be null");
        public string Email { get; } = Email ?? throw new ArgumentNullException(nameof(Email), "Email cannot be null");

        private readonly string password = Password ?? throw new ArgumentNullException(nameof(Password), "Password cannot be null");
        public string Password => password;
        public List<Playlist> AccountPlaylists { get; } = new();
        public int PlaylistCount => AccountPlaylists.Count;


        private static int GenerateUniqueUserId()
        {
            int newUserId;
            Random random = new();

            lock (lockObject)
            {
                do
                {
                    newUserId = random.Next(1000000, 10000000);
                } while (!User.AddUserId(newUserId));
            }

            return newUserId;
        }

        /// <summary>
        /// Add the unique ID generated by <see cref="GenerateUniqueArtistId"/> to the artistIds HashSet.
        /// </summary>
        /// <param name="newUserId"></param>
        /// <returns>
        /// <see langword="true"/> if the artist ID was successfully added to the HashSet (i.e., it was unique and not previously present); 
        /// <see langword="false"/> if the artist ID was already in the HashSet (i.e., it was not unique).
        ///</returns>
        public static bool AddUserId(int newUserId)
        {
            return userIds.Add(newUserId);
        }
    }
}
